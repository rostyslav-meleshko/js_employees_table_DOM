{"version":3,"sources":["scripts/main.js"],"names":["clickSortIndex","tableBody","document","querySelector","tableHead","FORM_FIELDS","CITIES","addEventListener","e","rows","rowsArray","querySelectorAll","index","target","cellIndex","delete$","string","slice","split","join","sort","a","b","a1","children","innerText","b1","localeCompare","reverse","row","append","currentRowIndex","parentElement","sectionRowIndex","classList","contains","remove","add","epmloyeeForm","createElement","className","body","fillingForm","form","labelsArray","selectOptions","label","createLabel","createInput","createSelect","type","dataset","qa","toLowerCase","name","option","createOption","formButton","button","preventDefault","checkFormValidation","data","FormData","get","length","addRow","labels","cell","cellValue","value","Number","toLocaleString","createEmployeeForm","pushNotification","text","div","innerHTML","toUpperCase","setTimeout","editedCell","closest","cellInput","focus","key","code"],"mappings":"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","file":"main.1cfd366c.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst tableBody = document.querySelector('tbody');\nconst tableHead = document.querySelector('thead');\nconst FORM_FIELDS = ['Name', 'Position', 'Office', 'Age', 'Salary'];\nconst CITIES = [\n  'Tokyo', 'Singapore', 'London',\n  'New York', 'Edinburgh', 'San Francisco',\n];\nlet clickSortIndex;\n\ntableHead.addEventListener('click', e => {\n  const rows = tableBody.querySelectorAll('tr');\n  const rowsArray = [...rows];\n  const index = e.target.cellIndex;\n\n  const delete$ = function(string) {\n    return +string.slice(1).split(',').join('');\n  };\n\n  const sortingAsc = (array) => {\n    array.sort((a, b) => {\n      const a1 = a.children[index].innerText;\n      const b1 = b.children[index].innerText;\n\n      if (e.target.innerText === 'Salary') {\n        return delete$(a1) - delete$(b1);\n      } else {\n        return a1.localeCompare(b1);\n      }\n    }\n    );\n  };\n\n  if (clickSortIndex !== index) {\n    sortingAsc(rowsArray);\n    clickSortIndex = index;\n  } else {\n    rowsArray.reverse();\n    clickSortIndex = null;\n  }\n\n  for (const row of rowsArray) {\n    tableBody.append(row);\n  }\n}\n);\n\ntableBody.addEventListener('click', e => {\n  const rows = tableBody.querySelectorAll('tr');\n  const currentRowIndex = e.target.parentElement.sectionRowIndex;\n\n  if (!rows[currentRowIndex].classList.contains('active')) {\n    for (const row of rows) {\n      row.classList.remove('active');\n    }\n    rows[currentRowIndex].classList.add('active');\n  }\n});\n\nconst epmloyeeForm = document.createElement('form');\n\nepmloyeeForm.className = 'new-employee-form';\n\ndocument.body.append(epmloyeeForm);\n\nconst fillingForm = (form, labelsArray, selectOptions) => {\n  for (const label of labelsArray) {\n    const createLabel = document.createElement('label');\n    const createInput = document.createElement('input');\n    const createSelect = document.createElement('select');\n\n    createLabel.innerText = label + ':';\n\n    switch (label) {\n      case 'Age': case 'Salary': createInput.type = 'number';\n        break;\n\n      default: createInput.type = 'text';\n    }\n\n    createInput.dataset.qa = `${label.toLowerCase()}`;\n    createInput.name = `${label.toLowerCase()}`;\n    createSelect.dataset.qa = `${label.toLowerCase()}`;\n    createSelect.name = `${label.toLowerCase()}`;\n\n    if (label !== 'Office') {\n      createLabel.append(createInput);\n      form.append(createLabel);\n    } else {\n      for (const option of selectOptions) {\n        const createOption = document.createElement('option');\n\n        createOption.name = `${option}`;\n        createOption.innerText = option;\n        createSelect.append(createOption);\n      }\n      createLabel.append(createSelect);\n      form.append(createLabel);\n    }\n  }\n\n  const formButton = document.createElement('button');\n\n  formButton.innerText = 'Save to table';\n  epmloyeeForm.append(formButton);\n};\n\nfillingForm(epmloyeeForm, FORM_FIELDS, CITIES);\n\nconst button = document.querySelector('button');\n\nbutton.addEventListener('click', (e) => {\n  e.preventDefault();\n\n  const checkFormValidation = (form) => {\n    const data = new FormData(form);\n\n    if (data.get('name').length >= 4\n    && data.get('position').length > 0\n    && data.get('age') >= 18\n    && data.get('age') < 90\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const createEmployeeForm = () => {\n    const addRow = document.createElement('tr');\n    const labels = document.querySelectorAll('label');\n\n    for (const label of labels) {\n      const cell = document.createElement('td');\n      const cellValue = label.children[0].value;\n\n      cell.innerText = cellValue;\n\n      if (label.children[0].dataset.qa === 'salary') {\n        cell.innerText = '$' + `${Number(cellValue).toLocaleString()}`;\n      };\n\n      addRow.append(cell);\n      tableBody.append(addRow);\n    }\n  };\n\n  if (!checkFormValidation(document.querySelector('form'))) {\n    pushNotification('error', 'Enter correct values');\n  } else {\n    createEmployeeForm();\n    pushNotification('success', 'Employee added to the table');\n  };\n});\n\nconst pushNotification = (type, text) => {\n  const div = document.createElement('div');\n\n  div.classList.add('notification', `${type}`);\n  div.dataset.qa = 'notification';\n\n  div.innerHTML = `\n  <h2>${type.toUpperCase()}</h2>\n  <p>${text}</p>`;\n\n  document.body.append(div);\n\n  setTimeout(() => div.remove(), 3000);\n};\n\ntableBody.addEventListener('dblclick', (e) => {\n  e.preventDefault();\n\n  const editedCell = e.target.closest('td');\n  const text = editedCell.innerText;\n  const cellInput = document.createElement('input');\n\n  cellInput.className = 'cell-input';\n  editedCell.innerText = '';\n  cellInput.value = text;\n\n  editedCell.append(cellInput);\n\n  cellInput.focus();\n\n  cellInput.addEventListener('keydown', (key) => {\n    if (key.code === 'Enter') {\n      editedCell.innerHTML = !cellInput.value ? text : cellInput.value;\n    }\n  });\n\n  cellInput.addEventListener('blur', () => {\n    editedCell.innerHTML = !cellInput.value ? text : cellInput.value;\n  });\n});\n"]}